import HelloTypeSystem.Basic
open HelloTypeSystem (PNat Judgement)

/-! $\newcommand\Set[1]{\mathbf{#1}}$ $\newcommand\MV[1]{\boldsymbol{#1}}$ $\newcommand\TT[1]{\texttt{#1}}$ $\newcommand\Evals{\mathrel{\Downarrow}}$ $\newcommand\Reduces{\mathrel{\longrightarrow}}$ $\newcommand\MReduces{\mathrel{\longrightarrow^{\\!*}}}$ $\newcommand\DReduces{\mathrel{\longrightarrow_{\\!d}}}$ -/
namespace CompareNat1
/--
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†CompareNat1„ÅÆÊé®Ë´ñË¶èÂâá
-/
inductive Derivation : Judgement ‚Üí Type where
  | LT_Succ (n : PNat)
    : Derivation (.LT n n.S)
  | LT_Trans {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat}
    : Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí Derivation (.LT n‚ÇÇ n‚ÇÉ) ‚Üí Derivation (.LT n‚ÇÅ n‚ÇÉ)

private abbrev Derivable := @HelloTypeSystem.Derivable Derivation

/--
Âà§Êñ≠"Z is less than SSZ"„ÅÆCompareNat1„Å´„Çà„ÇãÂ∞éÂá∫
-/
def Z_lt_SSZ : Derivation (.LT .Z (.S (.S .Z))) :=
  .LT_Trans (n‚ÇÅ := .Z) (n‚ÇÇ := .S .Z) (n‚ÇÉ := .S (.S .Z))
    (.LT_Succ (.Z))
    (.LT_Succ (.S .Z))

/--
Âà§Êñ≠"SSZ is less than SSSSZ"„ÅÆCompareNat1„Å´„Çà„ÇãÂ∞éÂá∫
-/
def SSZ_lt_SSSSZ : Derivation (.LT (.S (.S .Z)) (.S (.S (.S (.S .Z))))) :=
  .LT_Trans (n‚ÇÅ := .S (.S .Z)) (n‚ÇÇ := (.S (.S (.S .Z)))) (n‚ÇÉ := .S (.S (.S (.S .Z))))
    (.LT_Succ (.S (.S .Z)))
    (.LT_Succ (.S (.S (.S .Z))))

/-!
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†CompareNat1„ÅØÂà§Êñ≠"$\TT{$\MV{n_1}$ is less than $\MV{n_2}$}$"„Å´ÂØæ„Åó„Å¶„ÄÅ
Ë¶èÂâáLT_Trans„Å´„Åä„Åë„Çã‰∏≠Èñì„ÅÆÈ†ÖÔºà`n‚ÇÇ`Ôºâ„ÅÆÂèñ„ÇäÊñπ„Å´„Çà„Å£„Å¶Áï∞„Å™„ÇãÂ∞éÂá∫„Çí‰∏é„Åà„Çã„ÄÇ
-/

/--
Âà§Êñ≠"Z is less than SSSSZ"„ÅÆCompareNat1„Å´„Çà„ÇãÂ∞éÂá∫

Ë¶èÂâáLT_Trans„Åß$\MV{n_2} = \TT{SZ}$, $\MV{n_2} = \TT{SSZ}$, $\MV{n_2} = \TT{SSSZ}$„Å®„Åó„Å¶Â∞éÂá∫„Åô„Çã„ÄÇ
-/
def Z_lt_SSSSZ : Derivation (.LT .Z (.S (.S (.S (.S .Z))))) :=
  .LT_Trans (n‚ÇÅ := .Z) (n‚ÇÇ := .S .Z) (n‚ÇÉ := .S (.S (.S (.S .Z))))
    (.LT_Succ .Z)
    (.LT_Trans (n‚ÇÅ := .S .Z) (n‚ÇÇ := .S (.S .Z)) (n‚ÇÉ := .S (.S (.S (.S .Z))))
      (.LT_Succ (.S .Z))
      (.LT_Trans (n‚ÇÅ := .S (.S .Z)) (n‚ÇÇ := .S (.S (.S .Z))) (n‚ÇÉ := .S (.S (.S (.S .Z))))
        (.LT_Succ (.S (.S .Z)))
        (.LT_Succ (.S (.S (.S .Z))))
      )
    )

/--
Âà§Êñ≠"Z is less than SSSSZ"„ÅÆCompareNat1„Å´„Çà„ÇãÂ∞éÂá∫

Ë¶èÂâáLT_Trans„Åß$\MV{n_2} = \TT{SSZ}$, $\MV{n_2} = \TT{SZ}$, $\MV{n_2} = \TT{SSSZ}$„Å®„Åó„Å¶Â∞éÂá∫„Åô„Çã„ÄÇ
-/
def Z_lt_SSSSZ' : Derivation (.LT .Z (.S (.S (.S (.S .Z))))) :=
  .LT_Trans (n‚ÇÅ := .Z) (n‚ÇÇ := .S (.S .Z)) (n‚ÇÉ := .S (.S (.S (.S .Z))))
    (.LT_Trans (n‚ÇÅ := .Z) (n‚ÇÉ := .S (.S .Z))
      (.LT_Succ .Z)
      (.LT_Succ (.S .Z))
    )
    (.LT_Trans (n‚ÇÅ := .S (.S .Z)) (n‚ÇÉ := .S (.S (.S (.S .Z))))
      (.LT_Succ (.S (.S .Z)))
      (.LT_Succ (.S (.S (.S .Z))))
    )

/--
Âà§Êñ≠"Z is less than SSSSZ"„ÅÆCompareNat1„Å´„Çà„ÇãÂ∞éÂá∫

Ë¶èÂâáLT_Trans„Åß$\MV{n_2} = \TT{SSSZ}$, $\MV{n_2} = \TT{SZ}$, $\MV{n_2} = \TT{SSZ}$„Å®„Åó„Å¶Â∞éÂá∫„Åô„Çã„ÄÇ
-/
def Z_lt_SSSSZ'' : Derivation (.LT .Z (.S (.S (.S (.S .Z))))) :=
  .LT_Trans (n‚ÇÅ := .Z) (n‚ÇÇ := .S (.S (.S .Z))) (n‚ÇÉ := .S (.S (.S (.S .Z))))
    (.LT_Trans (n‚ÇÅ := .Z) (n‚ÇÇ := .S .Z) (n‚ÇÉ := .S (.S (.S .Z)))
      (.LT_Succ .Z)
      (.LT_Trans (n‚ÇÅ := .S .Z) (n‚ÇÇ := .S (.S .Z)) (n‚ÇÉ := .S (.S (.S .Z)))
        (.LT_Succ (.S .Z))
        (.LT_Succ (.S (.S .Z)))
      )
    )
    (.LT_Succ (.S (.S (.S .Z))))

def Z_lt_S : (n : PNat) ‚Üí Derivation (.LT .Z n.S)
  | .Z   => .LT_Succ .Z
  | .S n => .LT_Trans (Z_lt_S n) (.LT_Succ n.S)

/-
theorem Z_lt_S' : (n : PNat) ‚Üí Derivable (.LT .Z n.S)
  | .Z   => Derivation.LT_Succ .Z
  | .S n =>
      have ‚ü®ùíü‚ü© := Z_lt_S' n
      Derivation.LT_Trans ùíü (.LT_Succ n.S)
-/

/--
CompareNat1„Å´„Åä„Åë„Çã$\TT{$\MV{n_1}$ is less than $\MV{n_2}$}$„ÅÆÂ∞éÂá∫„Å´Èñ¢„Åô„ÇãÂ∏∞Á¥çÊ≥ï„Åß„ÄÅ
„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞„Å´Èñ¢„Åô„Çã2È†ÖËø∞Ë™û$P$„Å´„Å§„ÅÑ„Å¶$\forall\MV{n_1},\MV{n_2}. \bigl[\TT{$\MV{n_1}$ is less than $\MV{n_2}$} \implies P(\MV{n_1},\MV{n_2})\bigr]$„ÇíÁ§∫„Åô„ÄÇ
-/
def Derivation.induction
  {motive : PNat ‚Üí PNat ‚Üí Sort _} -- P(n‚ÇÅ,n‚ÇÇ)
  {n‚ÇÅ n‚ÇÇ : PNat}
  (H0 : ‚àÄ n : PNat, motive n n.S)
  (H1 : ‚àÄ {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat}, Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí Derivation (.LT n‚ÇÇ n‚ÇÉ) ‚Üí motive n‚ÇÅ n‚ÇÇ ‚Üí motive n‚ÇÇ n‚ÇÉ ‚Üí motive n‚ÇÅ n‚ÇÉ)
: Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí motive n‚ÇÅ n‚ÇÇ
  | .LT_Succ k      => H0 k
  | .LT_Trans ùíü‚ÇÅ ùíü‚ÇÇ => H1 ùíü‚ÇÅ ùíü‚ÇÇ (induction H0 H1 ùíü‚ÇÅ) (induction H0 H1 ùíü‚ÇÇ)

/-!
Ëá™Âãï„ÅßÁîüÊàê„Åï„Çå„Çã`casesOn`„ÇÑ`rec`„Å™„Å©„ÅØ`motive`„ÅÆÂûã„Åå`(a : Judgement) ‚Üí Derivation a ‚Üí Sort u`„Å®„Å™„Å£„Å¶„ÅÑ„Å¶„ÄÅ
„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞„Å´Èñ¢„Åô„ÇãËø∞Ë™û$P(\MV{n_1},\MV{n_2})$„ÇíÊâ±„ÅÜ„Å´„ÅØ`PNat ‚Üí PNat ‚Üí Sort u`„Å™Èñ¢Êï∞„Çí‰Ωú„ÇãÂøÖË¶Å„Åå„ÅÇ„Å£„Åü„ÄÇ
-/

/--
$\forall\MV{n_1},\MV{n_2}. \bigl[\TT{S$\MV{n_1}$ is less than $\MV{n_2}$} \implies \exists\MV{n_3}. \MV{n_2} \equiv \TT{S$\MV{n_3}$}\bigr]$

$P(\MV{n_1},\MV{n_2})$„ÅØ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å´ËÄÉ„Åà„ÇãÔºö
$$\begin{align*}
& \bigl[\exists\MV{n'_1}. \MV{n_1} \equiv \TT{S$\MV{n'_1}$}] \\\\
& {} \implies \bigl[ \TT{S$\MV{n'_1}$ is less than $\MV{n_2}$} \implies \exists\MV{n'_2}. \MV{n_2}\equiv\TT{S$\MV{n'_2}$} \bigr].
\end{align*}$$
`motive n‚ÇÅ n‚ÇÇ`„ÅØ
$$(\bullet,\TT{$\MV{n_2}$}) \mapsto \exists\MV{n'_2}. \MV{n_2}\equiv\TT{S$\MV{n'_2}$}$$
„Å®„Å™„Çã„Çà„ÅÜ„Å´ÂÆöÁæ©„Åô„Çã„ÄÇ
-/
theorem exists_succ_of_succ_lt {n‚ÇÅ n‚ÇÇ : PNat} : Derivation (.LT n‚ÇÅ.S n‚ÇÇ) ‚Üí ‚àÉ n‚ÇÉ : PNat, n‚ÇÇ = n‚ÇÉ.S :=
  Derivation.induction (motive := fun _ n‚ÇÇ => ‚àÉ n‚ÇÉ : PNat, n‚ÇÇ = n‚ÇÉ.S)
    (fun n => Exists.intro n rfl)
 -- (fun {n‚ÇÅ n‚ÇÇ n‚ÇÉ} lt12 lt23 ‚ü®n‚ÇÇ', h‚ÇÇ'‚ü© ‚ü®n‚ÇÉ', h‚ÇÉ'‚ü© =>
    (fun _ _ _ ‚ü®n‚ÇÉ',h‚ÇÉ'‚ü© => Exists.intro n‚ÇÉ' h‚ÇÉ')

/--
$P(\MV{n_1},\MV{n_2})$„Çí‰ª•‰∏ã„ÅßÂÆöÁæ©„Åô„ÇãÔºö
$$\begin{align*}
& \bigl[\exists\MV{n'_1},\MV{n'_2}. \MV{n_1} \equiv \TT{S$\MV{n'_1}$} \land \MV{n_2} \equiv \TT{S$\MV{n'_2}$}\bigr] \\\\
& {} \implies \bigl[ \TT{S$\MV{n'_1}$ is less than S$\MV{n'_2}$} \implies \TT{$\MV{n'_1}$ is less than $\MV{n'_2}$} \bigr].
\end{align*}$$
`motive n‚ÇÅ n‚ÇÇ`„ÅØ
$$(\TT{S$\MV{n'_1}$},\TT{S$\MV{n'_2}$}) \mapsto \TT{$\MV{n'_1}$ is less than $\MV{n'_2}$}$$
„Å®„Å™„Çã„Çà„ÅÜ„Å´ÂÆöÁæ©„Åô„Çã„ÄÇ
„Å©„Å°„Çâ„Åã„ÅÇ„Çã„ÅÑ„ÅØ‰∏°Êñπ„Åå`Z`„Åß„ÅÇ„ÇãÂ†¥Âêà„ÅØDon't care„Åß`True`„Å®„Åó„Å¶„Åä„Åè„ÄÇ
ÔºàÂèÇËÄÉÔºö[https://zenn.dev/tnyo43/scraps/afaa5fd8db3992#comment-41aa843ee675d1](https://zenn.dev/tnyo43/scraps/afaa5fd8db3992#comment-41aa843ee675d1)Ôºâ

`LT_Trans`„ÅÆÂ†¥ÂêàÂàÜ„ÅëÔºö
- `n‚ÇÅ = Sn‚ÇÅ'`„Åã„Å§`n‚ÇÇ = Sn‚ÇÇ'`„Åã„Å§`n‚ÇÉ = Sn‚ÇÉ'` ‚áí ‰ªÆÂÆö„ÅÆÂ∞éÂá∫„Åã„ÇâLT_Trans
- `n‚ÇÅ = Z`„Åæ„Åü„ÅØ`n‚ÇÉ = Z` ‚áí Áõ¥„Å°„Å´`True.intro`
- ‰∏äË®ò‰ª•Â§ñ„Åß`n‚ÇÇ = Z` ‚áí ‰ªÆÂÆö„Å®Â∞éÂá∫Ë¶èÂâá„ÇíÈßÜ‰Ωø

ÊúÄÂæå„ÅÆ„Éë„Çø„Éº„É≥„Åß‰ªÆÂÆö„Å´`Sn‚ÇÅ' is less than Z`„ÅÆ„Çà„ÅÜ„Å™ÊÑèÂë≥ÁöÑ„Å´ÂÅΩ„Å™Âà§Êñ≠„ÅåÂá∫„Å¶„Åè„Çã„Åå„ÄÅ
„ÅÇ„Åè„Åæ„Åß‰ªÆÂÆö„Å®„Åó„Å¶`n‚ÇÅ' is less than n‚ÇÉ'`„ÅÆÂΩ¢„ÇíÁõÆÊåá„Åô„ÄÇ
-/
theorem lt_of_S_lt_S {n‚ÇÅ n‚ÇÇ : PNat} : Derivation (.LT n‚ÇÅ.S n‚ÇÇ.S) ‚Üí Derivable (.LT n‚ÇÅ n‚ÇÇ) :=
  Derivation.induction
    (motive := fun n‚ÇÅ n‚ÇÇ =>
      match n‚ÇÅ,n‚ÇÇ with
      | .S n‚ÇÅ', .S n‚ÇÇ' => Derivable (.LT n‚ÇÅ' n‚ÇÇ')
      | _,     _       => True -- don't care
    )
    (fun n =>
      match n with
      | .S n => Derivation.LT_Succ n
      | .Z   => True.intro
    )
    (fun {n‚ÇÅ n‚ÇÇ n‚ÇÉ} d1 _ h1 h2 =>
      match n‚ÇÅ,n‚ÇÇ,n‚ÇÉ,h1,h2 with
      | .S _,   .S _, .S _,  ‚ü®d‚ÇÅ‚ü©, ‚ü®d‚ÇÇ‚ü© => Derivation.LT_Trans d‚ÇÅ d‚ÇÇ
      | .S n‚ÇÅ', .Z,   .S .Z, _,    _    =>
          Derivation.LT_Trans -- "n‚ÇÅ' < Z"
            (Derivation.LT_Succ n‚ÇÅ') -- n‚ÇÅ' < Sn‚ÇÅ'
            (d1)                     --       Sn‚ÇÅ' < Z
      | .S n‚ÇÅ', .Z, .S (.S n‚ÇÉ'), _, _ =>
          Derivation.LT_Trans -- "n‚ÇÅ' < Sn‚ÇÉ'"
            (Derivation.LT_Succ n‚ÇÅ') --  n‚ÇÅ' < Sn‚ÇÅ'
            (Derivation.LT_Trans     --        Sn‚ÇÅ' < Sn‚ÇÉ'
              d1           -- Sn‚ÇÅ' < Z
              (Z_lt_S n‚ÇÉ') --        Z < Sn‚ÇÉ'
            )
      | .S _, _, .Z, _, _ => True.intro
      | .Z,   _, _,  _, _ => True.intro
    )

theorem lt_trans : {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat} ‚Üí Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí Derivation (.LT n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.LT n‚ÇÅ n‚ÇÉ) :=
  fun {_ _ n‚ÇÉ} =>
    Derivation.induction (motive := fun n‚ÇÅ n‚ÇÇ => Derivation (.LT n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.LT n‚ÇÅ n‚ÇÉ))
      (fun n d => Derivation.LT_Trans (Derivation.LT_Succ n) d)
      (fun d1 d2 _ _ d => Derivation.LT_Trans (Derivation.LT_Trans d1 d2) d)

end CompareNat1

namespace CompareNat2
/--
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†CompareNat2„ÅÆÊé®Ë´ñË¶èÂâá
-/
inductive Derivation : Judgement ‚Üí Type where
  | LT_Zero (n : PNat)
    : Derivation (.LT .Z n.S)
  | LT_SuccSucc {n‚ÇÅ n‚ÇÇ : PNat}
    : Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí Derivation (.LT n‚ÇÅ.S n‚ÇÇ.S)

private abbrev Derivable := @HelloTypeSystem.Derivable Derivation

/--
CompareNat2„Å´„Åä„Åë„Çã$\TT{$\MV{n_1}$ is less than $\MV{n_2}$}$„ÅÆÂ∞éÂá∫„Å´Èñ¢„Åô„ÇãÂ∏∞Á¥çÊ≥ï
-/
def Derivation.induction
  {motive : PNat ‚Üí PNat ‚Üí Sort _} -- P(n‚ÇÅ,n‚ÇÇ)
  {n‚ÇÅ n‚ÇÇ : PNat}
  (H0 : ‚àÄ n : PNat, motive .Z n.S)
  (H1 : ‚àÄ {n‚ÇÅ n‚ÇÇ : PNat}, Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí motive n‚ÇÅ n‚ÇÇ ‚Üí motive n‚ÇÅ.S n‚ÇÇ.S)
: Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí motive n‚ÇÅ n‚ÇÇ
  | .LT_Zero n     => H0 n
  | .LT_SuccSucc ùíü => H1 ùíü (induction H0 H1 ùíü)

/--
Âà§Êñ≠"Z is less than SSZ"„ÅÆCompareNat2„Å´„Çà„ÇãÂ∞éÂá∫
-/
def Z_lt_SSZ : Derivation (.LT .Z PNat.Z.S.S) :=
  .LT_Zero PNat.Z.S

/--
Âà§Êñ≠"SSZ is less than SSSSZ"„ÅÆCompareNat2„Å´„Çà„ÇãÂ∞éÂá∫
-/
def SSZ_lt_SSSSZ : Derivation (.LT PNat.Z.S.S PNat.Z.S.S.S.S) :=
  .LT_SuccSucc (n‚ÇÅ := PNat.Z.S) (n‚ÇÇ := PNat.Z.S.S.S)
    (.LT_SuccSucc (n‚ÇÅ := .Z) (n‚ÇÇ := PNat.Z.S.S)
      (.LT_Zero PNat.Z.S)
    )

/-!
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†CompareNat2„Å´„Çà„ÇãÂ∞éÂá∫„Åß„ÅØ„ÄÅÂâçÊèê„Å´ÈÅ∏Êäû„ÅÆ‰ΩôÂú∞„Åå„Å™„ÅÑ„Åã„ÇâÂ∞éÂá∫Êú®„ÅÆÊõñÊòß„Åï„ÅØÁîü„Åò„Å™„ÅÑ„ÄÇ
-/

def Z_lt_S : (n : PNat) ‚Üí Derivation (.LT .Z n.S)
  | n => .LT_Zero n

theorem exists_succ_of_succ_lt {n‚ÇÅ n‚ÇÇ : PNat} : Derivation (.LT n‚ÇÅ.S n‚ÇÇ) ‚Üí ‚àÉ n‚ÇÉ : PNat, n‚ÇÇ = n‚ÇÉ.S :=
  Derivation.induction (motive := fun _ n‚ÇÇ => ‚àÉ n‚ÇÉ : PNat, n‚ÇÇ = n‚ÇÉ.S)
    (fun n => Exists.intro n rfl)
    (fun _ ‚ü®n‚ÇÇ', h‚ÇÇ'‚ü© => Exists.intro n‚ÇÇ'.S (h‚ÇÇ' ‚ñ∏ rfl))

theorem lt_of_S_lt_S {n‚ÇÅ n‚ÇÇ : PNat} : Derivation (.LT n‚ÇÅ.S n‚ÇÇ.S) ‚Üí Derivable (.LT n‚ÇÅ n‚ÇÇ) :=
  Derivation.induction
    (motive := fun n‚ÇÅ n‚ÇÇ =>
      match n‚ÇÅ,n‚ÇÇ with
      | .S n‚ÇÅ', .S n‚ÇÇ' => Derivable (.LT n‚ÇÅ' n‚ÇÇ')
      | _,     _       => True -- don't care
    )
    (fun _ => True.intro)
    (fun {n‚ÇÅ n‚ÇÇ} h1 h2 =>
      match n‚ÇÅ,n‚ÇÇ,h1,h2 with
      | .S _, .S _, _,  ‚ü®d2‚ü© => Derivation.LT_SuccSucc d2
      | .Z,   _,    d1, _    => d1
    )

theorem lt_trans : {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat} ‚Üí Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí Derivation (.LT n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.LT n‚ÇÅ n‚ÇÉ) :=
  fun {_ _ n‚ÇÉ} =>
    Derivation.induction (motive := fun n‚ÇÅ n‚ÇÇ => Derivation (.LT n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.LT n‚ÇÅ n‚ÇÉ))
      (fun _ d23 =>
        match n‚ÇÉ with
        | .Z     => nomatch d23 -- `Sn is less than Z`
        | .S n‚ÇÉ' => Derivation.LT_Zero n‚ÇÉ'
      )
      (fun d12 _ d23 =>
        match n‚ÇÉ with
        | .Z   => nomatch d23 -- `Sn‚ÇÇ is less than Z`
        | .S _ =>
            have ‚ü®d‚ü© := lt_of_S_lt_S d23
            have ‚ü®d‚ü© := lt_trans d12 d
            Derivation.LT_SuccSucc d
      )
/-!
Âà§Êñ≠`n‚ÇÅ is less than n‚ÇÇ`„ÅÆÂ∞éÂá∫„Å´Èñ¢„Åô„ÇãÂ∏∞Á¥çÊ≥ï„ÅßÁ§∫„Åô„ÄÇ
$P(\MV{n_1},\MV{n_2})$„ÅØ
$$\TT{$\MV{n_2}$ is less than $\MV{n_3}$} \implies \TT{$\MV{n_1}$ is less than $\MV{n_3}$}.$$
$\MV{n_3} \equiv \TT{Z}$„ÅÆ„Å®„Åç„ÅØÂâçÊèê„ÅÆÂà§Êñ≠„ÅåÂ∞éÂá∫„Åß„Åç„Å™„ÅÑÔºà`nomatch`Ôºâ„ÅÆ„Åß„ÄÅ
‰ª•‰∏ã$\MV{n_3} \equiv \TT{S$\MV{n'_3}$}$„Å®„Åä„Åè„ÄÇ
`n‚ÇÅ is less than n‚ÇÇ`„ÅÆÂ∞éÂá∫„Å´„Çà„Å£„Å¶Â†¥ÂêàÂàÜ„ÅëÔºö
- `LT_Zero`
  - $\forall\MV{n}. P(\TT{Z},\TT{S$\MV{n}$})$
  - $\TT{S$\MV{n}$ is less than S$\MV{n'_3}$} \implies \TT{Z is less than S$\MV{n'_3}$}$
  - $$
    \dfrac{}{
      \TT{Z is less than S$\MV{n'_3}$}
    }\mathsf{LT\\_Zero}
    $$
- `LT_SuccSucc`
  - $\forall\MV{n_1},\MV{n_2}. \bigl[\text{‚Äú$\MV{n_1}<\MV{n_2}$‚Äù} \land P(\MV{n_1},\MV{n_2}) \implies P(\TT{S$\MV{n_1}$},\TT{S$\MV{n_2}$})\bigr]$
  - $\TT{S$\MV{n_2}$ is less than S$\MV{n'_3}$} \implies \TT{S$\MV{n_1}$ is less than S$\MV{n'_3}$}$
  - $\mathcal{D}_{12} \in \TT{$\MV{n_1}$ is less than $\MV{n_2}$}$ ‚àµÂ∏∞Á¥çÊ≥ï„ÅÆ‰ªÆÂÆö
  - $\mathcal{D}_{23'} \in \TT{$\MV{n_2}$ is less than $\MV{n'_3}$}$ ‚àµ‰ªÆÂÆö„Å´`lt_of_S_lt_S`„ÇíÈÅ©Áî®
  - $\mathcal{D} \in \TT{$\MV{n\_1}$ is less than $\MV{n'\_3}$}$ ‚àµ`lt_trans` to $\mathcal{D}\_{12}$ and $\mathcal{D}\_{23'}$
  - $$
    \dfrac{
      \mathcal{D} \equiv \dfrac{\vdots}{\TT{$\MV{n_1}$ is less than $\MV{n'_3}$}}
    }{
      \TT{S$\MV{n_1}$ is less than S$\MV{n'_3}$}
    }\mathsf{LT\\_SuccSucc}
    $$
-/
end CompareNat2

namespace CompareNat3
/--
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†CompareNat3„ÅÆÊé®Ë´ñË¶èÂâá
-/
inductive Derivation : Judgement ‚Üí Type where
  | LT_Succ (n : PNat)
    : Derivation (.LT n n.S)
  | LT_SuccR {n‚ÇÅ n‚ÇÇ : PNat}
    : Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí Derivation (.LT n‚ÇÅ n‚ÇÇ.S)

private abbrev Derivable := @HelloTypeSystem.Derivable Derivation

/--
CompareNat3„Å´„Åä„Åë„Çã$\TT{$\MV{n_1}$ is less than $\MV{n_2}$}$„ÅÆÂ∞éÂá∫„Å´Èñ¢„Åô„ÇãÂ∏∞Á¥çÊ≥ï
-/
def Derivation.induction
  {motive : PNat ‚Üí PNat ‚Üí Sort _} -- P(n‚ÇÅ,n‚ÇÇ)
  {n‚ÇÅ n‚ÇÇ : PNat}
  (H0 : ‚àÄ n : PNat, motive n n.S)
  (H1 : ‚àÄ {n‚ÇÅ n‚ÇÇ : PNat}, Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí motive n‚ÇÅ n‚ÇÇ ‚Üí motive n‚ÇÅ n‚ÇÇ.S)
: Derivation (.LT n‚ÇÅ n‚ÇÇ) ‚Üí motive n‚ÇÅ n‚ÇÇ
  | .LT_Succ n  => H0 n
  | .LT_SuccR ùíü => H1 ùíü (induction H0 H1 ùíü)

/--
Âà§Êñ≠"Z is less than SSZ"„ÅÆCompareNat3„Å´„Çà„ÇãÂ∞éÂá∫
-/
def Z_lt_SSZ : Derivation (.LT .Z PNat.Z.S.S) :=
  .LT_SuccR (n‚ÇÅ := .Z) (n‚ÇÇ := PNat.Z.S)
    (.LT_Succ .Z)

/--
Âà§Êñ≠"SSZ is less than SSSSZ"„ÅÆCompareNat3„Å´„Çà„ÇãÂ∞éÂá∫
-/
def SSZ_lt_SSSSZ : Derivation (.LT PNat.Z.S.S PNat.Z.S.S.S.S) :=
  .LT_SuccR (n‚ÇÅ := PNat.Z.S.S) (n‚ÇÇ := PNat.Z.S.S.S)
    (.LT_Succ PNat.Z.S.S)

/-!
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†CompareNat3„Å´„Çà„ÇãÂ∞éÂá∫„Åß„ÅØ„ÄÅÂâçÊèê„Å´ÈÅ∏Êäû„ÅÆ‰ΩôÂú∞„Åå„Å™„ÅÑ„Åã„ÇâÂ∞éÂá∫Êú®„ÅÆÊõñÊòß„Åï„ÅØÁîü„Åò„Å™„ÅÑ„ÄÇ
-/

def Z_lt_S : (n : PNat) ‚Üí Derivation (.LT .Z n.S)
  | .Z   => .LT_Succ .Z
  | .S n => .LT_SuccR (Z_lt_S n)

theorem exists_succ_of_succ_lt {n‚ÇÅ n‚ÇÇ : PNat} : Derivation (.LT n‚ÇÅ.S n‚ÇÇ) ‚Üí ‚àÉ n‚ÇÉ : PNat, n‚ÇÇ = n‚ÇÉ.S :=
  Derivation.induction (motive := fun _ n‚ÇÇ => ‚àÉ n‚ÇÉ : PNat, n‚ÇÇ = n‚ÇÉ.S)
    (fun n => Exists.intro n rfl)
    (fun _ ‚ü®n‚ÇÇ',h‚ÇÇ'‚ü© => Exists.intro n‚ÇÇ'.S (h‚ÇÇ' ‚ñ∏ rfl))

theorem lt_of_S_lt_S {n‚ÇÅ n‚ÇÇ : PNat} : Derivation (.LT n‚ÇÅ.S n‚ÇÇ.S) ‚Üí Derivable (.LT n‚ÇÅ n‚ÇÇ) :=
  Derivation.induction
    (motive := fun n‚ÇÅ n‚ÇÇ =>
      match n‚ÇÅ,n‚ÇÇ with
      | .S n‚ÇÅ', .S n‚ÇÇ' => Derivable (.LT n‚ÇÅ' n‚ÇÇ')
      | _,     _       => True -- don't care
    )
    (fun n =>
      match n with
      | .Z    => True.intro
      | .S n' => Derivation.LT_Succ n'
    )
    (fun {n‚ÇÅ n‚ÇÇ} h1 h2 =>
      match n‚ÇÅ,n‚ÇÇ,h1,h2 with
      | .S _, .S _, _, ‚ü®d2‚ü© => Derivation.LT_SuccR d2
      | .Z,   _,    _, _    => True.intro
    )

end CompareNat3
