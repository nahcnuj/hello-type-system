import HelloTypeSystem.Basic
open HelloTypeSystem (PNat Judgement)

namespace Nat
/--
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†Nat„ÅÆÊé®Ë´ñË¶èÂâá„Å´„Çà„ÇãÂ∞éÂá∫
-/
inductive Derivation : Judgement ‚Üí Type where
  /--
  ‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n}$„Å´ÂØæ„Åó„Å¶„ÄÅÂà§Êñ≠"$\TT{Z plus $\MV{n}$ is $\MV{n}$}$"„ÇíÂ∞é„ÅÑ„Å¶ËâØ„ÅÑ„ÄÇ
  -/
  | P_Zero (n : PNat)
    : Derivation (.Plus .Z n n)
  /--
  ‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n_1},\MV{n_2},\MV{n_3}$„Å´ÂØæ„Åó„Å¶„ÄÅÂà§Êñ≠"$\TT{$\MV{n_1}$ plus $\MV{n_2}$ is $\MV{n_3}$}$"„Åã„Çâ"$\TT{S$\MV{n_1}$ plus $\MV{n_2}$ is S$\MV{n_3}$}$"„ÇíÂ∞é„ÅÑ„Å¶ËâØ„ÅÑ„ÄÇ
  -/
  | P_Succ {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat}
    : Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivation (.Plus n‚ÇÅ.S n‚ÇÇ n‚ÇÉ.S)
  /--
  "$\TT{Z times $\MV{n}$ is Z}$"
  -/
  | T_Zero (n : PNat)
    : Derivation (.Times .Z n .Z)
  /--
  "$\TT{$\MV{n_1}$ times $\MV{n_2}$ is $\MV{n_3}$}$"„Åã„Å§"$\TT{$\MV{n_2}$ plus $\MV{n_3}$ is $\MV{n_4}$}$"„Å™„Çâ„Å∞„ÄÅ"$\TT{S$\MV{n_1}$ times $\MV{n_2}$ is $\MV{n_4}$}$"
  -/
  | T_Succ {n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : PNat}
    : Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivation (.Plus n‚ÇÇ n‚ÇÉ n‚ÇÑ) ‚Üí Derivation (.Times n‚ÇÅ.S n‚ÇÇ n‚ÇÑ)

/-!
"Z plus SSSSSZ is SSSSSZ"„ÅØË¶èÂâáP_Zero„Åß$\MV{n} = \TT{SSSSSZ}$„Å®„Åô„Çå„Å∞Â∞é„Åë„Çã„ÄÇ
-/
example : Derivation (.Plus .Z (.S (.S (.S (.S (.S (.Z)))))) (.S (.S (.S (.S (.S (.Z))))))) :=
  .P_Zero (n := .S (.S (.S (.S (.S (.Z))))))

/--
‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n}$„Å´ÂØæ„Åó„Å¶„ÄÅË¶èÂâáP_Zero„Çí1ÂõûÁî®„ÅÑ„Å¶Âà§Êñ≠"$\TT{Z plus $\MV{n}$ is $\MV{n}$}$"„ÇíÂ∞é„Åë„Çã„ÄÇ
-/
def Derivation.Z_plus (n : PNat) : Derivation (.Plus .Z n n) :=
  .P_Zero n

/--
‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n_1}, \MV{n_2}, \MV{n_3}$„Å´ÂØæ„Åó„Å¶„ÄÅÂà§Êñ≠"$\TT{$\MV{n_1}$ plus $\MV{n_2}$ is $\MV{n_3}$}$"„ÅÆÂ∞éÂá∫„Åã„ÇâË¶èÂâáP_Succ„Çí1ÂõûÁî®„ÅÑ„Å¶"$\TT{S$\MV{n_1}$ plus $\MV{n_2}$ is S$\MV{n_3}$}$"„ÇíÂ∞é„Åë„Çã„ÄÇ
-/
def Derivation.S_plus {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat} : Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivation (.Plus n‚ÇÅ.S n‚ÇÇ n‚ÇÉ.S) :=
  @Derivation.P_Succ n‚ÇÅ n‚ÇÇ n‚ÇÉ

/--
Âà§Êñ≠"SSZ plus SSSZ is SSSSSZ"„ÅÆÂ∞éÂá∫
1. Ë¶èÂâáP_Zero„Åß$\MV{n} = \TT{SSSZ}$„Å®„Åó„Å¶"Z plus SSSZ is SSSZ"
2. Ë¶èÂâáP_Succ„Åß$\MV{n_1} = \TT{Z}, \MV{n_2} = \TT{SSSZ}, \MV{n_3} = \TT{SSSZ}$„Å®„Åó„Å¶„ÄÅÂâçÊèê„ÅØ1.„ÅßÂ∞é„Åã„Çå„Å¶„ÅÑ„Çã„Åã„Çâ"SZ plus SSSZ is SSSSZ"
3. Ë¶èÂâáP_Succ„Åß$\MV{n_1} = \TT{SZ}, \MV{n_2} = \TT{SSSZ}, \MV{n_3} = \TT{SSSSZ}$„Å®„Åó„Å¶„ÄÅÂâçÊèê„ÅØ2.„ÅßÂ∞é„Åã„Çå„Å¶„ÅÑ„Çã„Åã„Çâ"SSZ plus SSSZ is SSSSSZ"
-/
def SSZ_plus_SSSZ : Derivation (.Plus (.S (.S .Z)) (.S (.S (.S .Z))) (.S (.S (.S (.S (.S .Z)))))) :=
  -- Step 1
  .P_Zero (.S (.S (.S .Z))) |>
  -- Step 2
  .P_Succ (n‚ÇÅ := .Z) (n‚ÇÇ := .S (.S (.S .Z))) (n‚ÇÉ := .S (.S (.S .Z))) |>
  -- Step 3
  .P_Succ (n‚ÇÅ := .S .Z) (n‚ÇÇ := .S (.S (.S .Z))) (n‚ÇÉ := .S (.S (.S (.S .Z))))

/--
Âà§Êñ≠"SSZ times SSZ is SSSSZ"„ÅÆÂ∞éÂá∫
1. Ë¶èÂâáT_Zero„Åã„Çâ"Z times SSZ is Z"
2. Ë¶èÂâáT_Succ„Åã„Çâ"SZ times SSZ is SSZ"
    - „Åì„Åì„ÅßË¶èÂâáP_Zero„Å®P_Succ„Åã„Çâ"SSZ plus Z is SSZ"„ÇíÂ∞éÂá∫„Åó„Å¶„ÇÇ„ÅÜ‰∏Ä„Å§„ÅÆÂâçÊèê„Å´‰Ωø„ÅÜ
3. Ë¶èÂâáT_Succ„Åã„Çâ"SSZ times SSZ is SSSSZ"
    - ÂêåÊßò„Å´„Åó„Å¶"SSZ plus Z is SSZ"„Çí„ÇÇ„ÅÜ‰∏Ä„Å§„ÅÆÂâçÊèê„Å´‰Ωø„ÅÜ
-/
def SSZ_times_SSZ : Derivation (.Times (.S (.S .Z)) (.S (.S .Z)) (.S (.S (.S (.S .Z))))) :=
  (.T_Zero (.S (.S .Z))) |>
  (.T_Succ (n‚ÇÅ := .Z) (n‚ÇÇ := .S (.S .Z)) (n‚ÇÉ := .Z) (n‚ÇÑ := .S (.S .Z))
    ¬∑
    (.P_Zero .Z |> .P_Succ |> .P_Succ)) |>
  (.T_Succ (n‚ÇÅ := .S .Z) (n‚ÇÇ := .S (.S .Z)) (n‚ÇÉ := .S (.S .Z)) (n‚ÇÑ := .S (.S (.S (.S .Z))))
    ¬∑
    (.P_Zero (.S (.S .Z)) |> .P_Succ |> .P_Succ))

/--
Á∑¥ÁøíÂïèÈ°å1.2 (1) Âà§Êñ≠"SSSZ plus SZ is SSSSZ"„ÅÆÂ∞éÂá∫
-/
def exercise_1_2_1 : Derivation (.Plus (.S (.S (.S .Z))) (.S .Z) (.S (.S (.S (.S .Z))))) :=
  .P_Zero (.S .Z) |> .P_Succ |> .P_Succ |> .P_Succ

/--
Á∑¥ÁøíÂïèÈ°å1.2 (2) Âà§Êñ≠"SZ plus SSSZ is SSSSZ"„ÅÆÂ∞éÂá∫
-/
def exercise_1_2_2 : Derivation (.Plus (.S .Z) (.S (.S (.S .Z))) (.S (.S (.S (.S .Z))))) :=
  .P_Zero (.S (.S (.S .Z))) |> .P_Succ

/--
Á∑¥ÁøíÂïèÈ°å1.2 (3) Âà§Êñ≠"SSSZ times Z is Z"„ÅÆÂ∞éÂá∫
-/
def exercise_1_2_3 : Derivation (.Times (.S (.S (.S .Z))) .Z .Z) :=
  .T_Zero .Z |>
  (.T_Succ ¬∑ (.P_Zero .Z)) |>
  (.T_Succ ¬∑ (.P_Zero .Z)) |>
  (.T_Succ ¬∑ (.P_Zero .Z))

/--
`steps`„ÅØÂà§Êñ≠`judge`„ÅÆÂ∞éÂá∫„Ç∑„Çπ„ÉÜ„É†Nat„Åß„ÅÆÂ∞éÂá∫„ÇíÂèó„ÅëÂèñ„Å£„Å¶„Åù„ÅÆ„Çπ„ÉÜ„ÉÉ„ÉóÊï∞„ÇíËøî„Åô„ÄÇ
-/
def Derivation.steps {judge : Judgement} : Derivation judge ‚Üí Nat
  | .P_Zero _     => 1
  | .P_Succ h     => 1 + h.steps
  | .T_Zero _     => 1
  | .T_Succ ht hp => 1 + hp.steps + ht.steps

section
open Derivation
example : steps SSZ_plus_SSSZ = 3 := rfl
example : steps SSZ_times_SSZ = 9 := rfl
example : steps exercise_1_2_1 = 4 := rfl
example : steps exercise_1_2_2 = 2 := rfl
example : steps exercise_1_2_3 = 7 := rfl
end

namespace Derivation
theorem steps_P_Zero (n : PNat)
  : steps (.P_Zero n) = 1 := rfl
theorem steps_P_Succ {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat} (h : Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ))
  : steps (.P_Succ h) = 1 + h.steps := rfl

theorem steps_T_Zero (n : PNat)
  : steps (.T_Zero n) = 1 := rfl
theorem steps_T_Succ {n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : PNat} (ht : Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)) (hp : Derivation (.Plus n‚ÇÇ n‚ÇÉ n‚ÇÑ))
  : steps (.T_Succ ht hp) = 1 + hp.steps + ht.steps := rfl

/--
‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n_1},\MV{n_2},\MV{n_3}$„Å´ÂØæ„Åó„Å¶„ÄÅÂ∞éÂá∫„Ç∑„Çπ„ÉÜ„É†Nat„Å´„Çà„Å£„Å¶Â∞éÂá∫„Åï„Çå„ÇãÂà§Êñ≠"$\TT{$\MV{n_1}$ plus $\MV{n_2}$ is $\MV{n_3}$}$"„ÅØ$n_1 + 1$„Çπ„ÉÜ„ÉÉ„Éó„ÅßÂ∞éÂá∫„Åß„Åç„Çã„ÄÇ
-/
theorem steps_plus {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat} : (h : Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)) ‚Üí steps h = n‚ÇÅ + 1
  | .P_Zero _ => rfl
  | .P_Succ (n‚ÇÅ := n‚ÇÅ) h => show steps (P_Succ h) = n‚ÇÅ.S + 1 from
      calc _
        _ = 1 + steps h := steps_P_Succ h
        _ = 1 + n‚ÇÅ.S    := congrArg _ (steps_plus h)
        _ = n‚ÇÅ.S + 1    := Nat.add_comm ..

/--
‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n_1},\MV{n_2},\MV{n_3}$„Å´ÂØæ„Åó„Å¶„ÄÅÂ∞éÂá∫„Ç∑„Çπ„ÉÜ„É†Nat„Å´„Çà„Å£„Å¶Â∞éÂá∫„Åï„Çå„ÇãÂà§Êñ≠"$\TT{$\MV{n_1}$ times $\MV{n_2}$ is $\MV{n_3}$}$"„ÅØ$n_1 \times (n_2 + 2) + 1$„Çπ„ÉÜ„ÉÉ„Éó„ÅßÂ∞éÂá∫„Åß„Åç„Çã„ÄÇ
$$\because (\text{T_Zero}) + (\text{T_Succ}) + n_1 \times (\text{T_Succ„ÅÆÂâçÊèê}) = 1 + n_1 + n_1 \times (n_2 + 1)$$
-/
theorem steps_times {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat} : (h : Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)) ‚Üí steps h = n‚ÇÅ * (n‚ÇÇ + 2) + 1
  | .T_Zero n => Nat.zero_mul _ ‚ñ∏ steps_T_Zero n
  | .T_Succ (n‚ÇÅ := n‚ÇÅ) ht hp =>
      calc _
        _ = 1 + steps hp + steps ht      := steps_T_Succ ht hp
        _ = 1 + (n‚ÇÇ + 1) + steps ht      := congrArg (_ + ¬∑ + _) (steps_plus hp)
        _ = n‚ÇÇ + 2 + steps ht            := congrArg (¬∑ + _) (Nat.add_left_comm ..)
        _ = n‚ÇÇ + 2 + (n‚ÇÅ * (n‚ÇÇ + 2) + 1) := congrArg _ (steps_times ht)
        _ = n‚ÇÇ + 2 + n‚ÇÅ * (n‚ÇÇ + 2) + 1   := (Nat.add_assoc ..).symm
        _ = n‚ÇÅ * (n‚ÇÇ + 2) + (n‚ÇÇ + 2) + 1 := congrArg (¬∑ + 1) (Nat.add_comm ..)
        _ = (n‚ÇÅ + 1) * (n‚ÇÇ + 2) + 1      := congrArg (¬∑ + 1) (Nat.succ_mul ..).symm

end Derivation

/--
‰∏é„Åà„Çâ„Çå„ÅüÂà§Êñ≠„ÅåÂ∞éÂá∫„Åß„Åç„Çã„Å®„ÅÑ„ÅÜÂëΩÈ°å
-/
inductive Derivable (judge : Judgement) : Prop where
  | intro (h : Derivation judge)

/--
Â∞éÂá∫„ÅÆÈ†Ö„ÅåÊßãÁØâ„Åß„Åç„Åü„Å®„Åç„ÅØÊòé„Çâ„Åã„Å´Â∞éÂá∫„Åß„Åç„Çã„ÅÆ„ÅßÂûãÂº∑Âà∂„Åô„Çã
-/
instance : Coe (Derivation judge) (Derivable judge) where
  coe h := ‚ü®h‚ü©

/--
‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n}$„Å´ÂØæ„Åó„Å¶„ÄÅÂà§Êñ≠"$\TT{Z plus $\MV{n}$ is $\MV{n}$}$"„ÅØË¶èÂâáP_Zero„Å´„Çà„Å£„Å¶Â∞éÂá∫„Åß„Åç„Çã„ÄÇ
-/
theorem Z_plus : ‚àÄ n : PNat, Derivable (.Plus .Z n n)
  | n => Derivation.P_Zero n

theorem plus_Z : ‚àÄ n : PNat, Derivable (.Plus n .Z n) :=
  -- „Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞`n`„Å´Èñ¢„Åô„ÇãÔºàÊßãÈÄ†ÔºâÂ∏∞Á¥çÊ≥ï„ÅßÁ§∫„Åô
  fun n => PNat.recOn n
    -- `n ‚â° Z`„ÅÆ„Å®„Åç"Z plus Z is Z"„ÇíÁ§∫„Åô
    (Derivation.P_Zero .Z)
    -- `n`„ÅßÊàêÁ´ãÔºà`plus_Z n` ‚â° "n plus Z is n"Ôºâ„Çí‰ªÆÂÆö„Åó„Å¶"Sn plus Z is Sn"„ÇíÁ§∫„Åô
    (fun n ‚ü®ùíü‚ü© => Derivation.P_Succ (n‚ÇÅ := n) ùíü)

/-
theorem plus_Z' : ‚àÄ n : PNat, Derivable (.Plus n .Z n)
  | .Z   => Derivation.P_Zero .Z
  | .S n =>
      have ‚ü®ùíü‚ü© := plus_Z' n
      Derivation.P_Succ (n‚ÇÅ := n) ùíü
-/

/--
‰ªªÊÑè„ÅÆ„Éö„Ç¢„ÉéËá™ÁÑ∂Êï∞$\MV{n_1},\MV{n_2},\MV{n_3},\MV{n_4}$„Å´ÂØæ„Åó„Å¶„ÄÅ
$\TT{$\MV{n_1}$ plus $\MV{n_2}$ is $\MV{n_3}$}$„Åã„Å§$\TT{$\MV{n_1}$ plus $\MV{n_2}$ is $\MV{n_4}$}$„Å™„Çâ„Å∞
$\MV{n_3} \equiv \MV{n_4}$
-/
theorem thm_2_2 {n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : PNat} : Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÑ) ‚Üí n‚ÇÉ = n‚ÇÑ
  | .P_Zero _,  .P_Zero _  => rfl
  | .P_Succ ha, .P_Succ hb => congrArg PNat.S (thm_2_2 ha hb)

/-
ÈÄÜ„ÅÆn‚ÇÉ = n‚ÇÑ„Å†„Å£„Åü„Çâ...„ÇíÊõ∏„Åì„ÅÜ„Å®ÊÄù„ÅÜ„Å®ÂºïÊï∞„ÇÇProp„Å´„Åó„Åü„Åè„Å™„Å£„Åü„Åå„ÄÅ
„Åù„Çå„ÅØËá™Êòé„Å†„Åó„ÄÅÂºïÊï∞„ÅåProp„Åß„Å™„Åë„Çå„Å∞„Å™„Çâ„Å™„ÅÑ„Å®„ÅÑ„ÅÜ„Çè„Åë„Åß„ÇÇ„Å™„Åã„Å£„Åü„ÄÇ

theorem thm_2_2' {n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : PNat} : Derivable (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÑ) ‚Üí n‚ÇÉ = n‚ÇÑ :=
  fun ‚ü®h‚ÇÅ‚ü© ‚ü®h‚ÇÇ‚ü© => thm_2_2 h‚ÇÅ h‚ÇÇ
    -- match h‚ÇÅ, h‚ÇÇ with
    --   | .P_Zero _,  .P_Zero _  => rfl
    --   | .P_Succ ha, .P_Succ hb => congrArg PNat.S (thm_2_2' ‚ü®ha‚ü© ‚ü®hb‚ü©)

theorem thm_2_2'' {n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : PNat} : Derivable (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÑ) ‚Üí n‚ÇÉ = n‚ÇÑ
  | ‚ü®h‚ÇÅ‚ü©, ‚ü®h‚ÇÇ‚ü© => thm_2_2 h‚ÇÅ h‚ÇÇ
-/

theorem thm_2_3 : ‚àÄ n‚ÇÅ n‚ÇÇ : PNat, ‚àÉ n‚ÇÉ : PNat, Derivable (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)
  | .Z,   k => Exists.intro k (Z_plus k)
  | .S n, k =>
      have ‚ü®¬´n+k¬ª, ‚ü®h‚ü©‚ü© := thm_2_3 n k
      Exists.intro ¬´n+k¬ª.S (Derivation.P_Succ h)

theorem plus_S {n‚ÇÅ n‚ÇÇ n‚ÇÉ : PNat} : Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.Plus n‚ÇÅ n‚ÇÇ.S n‚ÇÉ.S)
  | .P_Zero n‚ÇÇ => Derivation.P_Zero n‚ÇÇ.S
  | .P_Succ ùíü  =>
      have ‚ü®h‚ü© := plus_S ùíü
      Derivation.P_Succ h

/--
Âä†ÁÆó„ÅÆ‰∫§ÊèõÂâá
-/
theorem thm_2_4 {n‚ÇÇ n‚ÇÉ : PNat} : ‚àÄ n‚ÇÅ : PNat, Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí Derivable (.Plus n‚ÇÇ n‚ÇÅ n‚ÇÉ)
  | .Z,   .P_Zero n => plus_Z n
  | .S n, .P_Succ k =>
      have ‚ü®h‚ü© := thm_2_4 n k
      plus_S h
-- Á≠âÂºè„Ç≥„É≥„Éë„Ç§„É©„Å´È†º„Çâ„Å™„ÅÑÊõ∏„ÅçÊñπÔºàPNat.recOn„Åô„Çã„ÇÑ„ÇäÊñπÔºüÔºâ„Åå„Çè„Åã„Çâ„Å™„ÅÑ
-- n‚ÇÅ„Å´‰æùÂ≠ò„Åó„Å¶Derivation ...„ÅÆÈ†Ö„ÅåÊ±∫„Åæ„Çã„ÅÆ„ÅåÈõ£„Åó„ÅïÔºü
