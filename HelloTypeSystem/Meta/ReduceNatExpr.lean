import HelloTypeSystem.Basic
import HelloTypeSystem.Meta.PeanoNat

namespace HelloTypeSystem.ReduceNatExpr

/-!
# ÁÆóË°ìÂºè„ÅÆÁ∞°Á¥Ñ
-/

/-!
## ÁÆóË°ìÂºè„ÅÆÁ∞°Á¥Ñ„ÅÆ‰æã
### Á∑¥ÁøíÂïèÈ°å1.9 [Âü∫Á§éÊ¶ÇÂøµ,¬ß1.4]
#### (1) $\TT{Z + SSZ} \MReduces \TT{SSZ}$
-/
/--
$$
\dfrac{%
  \dfrac{%
    \dfrac{}{%
      \TT{Z plus SSZ is SSZ}%
    }\mathsf{P\\_Zero}%
  }{%
    \TT{Z + SSZ ${\Reduces}$ SSZ}%
  }\mathsf{R\\_Plus}%
}{%
  \TT{Z + SSZ ${\MReduces}$ SSZ}%
}\mathsf{MR\\_Once}
$$
-/
def mreduce_add_Z_SSZ : Derivation (0 + 2 ‚ü∂* 2) :=
  (.MR_Once
    (.R_Plus
      (.P_Zero 2)))

/-!
Âà§Êñ≠`SZ times SZ is SZ`„Çí„Çà„Åè‰Ωø„ÅÜ„ÅÆ„ÅßÂ∞éÂá∫„Åó„Å¶„Åä„Åè„ÄÇ
-/
def derive_times_SZ_SZ : Derivation (.Times 1 1 1) :=
  (.T_Zero 1 |>
    (.T_Succ ¬∑ (.P_Zero 0 |> .P_Succ)))

/-!
#### (2) $\TT{SZ * SZ + SZ * SZ} \DReduces \TT{SZ + SZ * SZ}$
-/
def dreduce_add_mul_SZ_SZ_mul_SZ_SZ : Derivation (1 * 1 + 1 * 1 ‚ü∂' 1 + 1 * 1) :=
  (.DR_PlusL
    (.DR_Times
      derive_times_SZ_SZ))

/-!
#### (3) $\TT{SZ * SZ + SZ * SZ} \Reduces \TT{SZ * SZ + SZ}$
-/
def reduce_add_mul_SZ_SZ_mul_SZ_SZ : Derivation (1 * 1 + 1 * 1 ‚ü∂ 1 * 1 + 1) :=
  (.R_PlusR
    (.R_Times
      derive_times_SZ_SZ))

/-!
#### (4) $\TT{SZ * SZ + SZ * SZ} \MReduces \TT{SSZ}$
-/
def mreduce_add_mul_SZ_SZ_mul_SZ_SZ : Derivation (1 * 1 + 1 * 1 ‚ü∂* 2) :=
  -- Âè≥„ÅÆ‰πóÁÆó„ÇíÁ∞°Á¥Ñ
  (.MR_Once reduce_add_mul_SZ_SZ_mul_SZ_SZ) |>
  -- Â∑¶„ÅÆ‰πóÁÆó„ÇíÁ∞°Á¥Ñ
  (.MR_Multi
    ¬∑
    (.MR_Once
      (.R_PlusL
        (.R_Times derive_times_SZ_SZ)))) |>
  -- Âä†ÁÆó„ÇíÁ∞°Á¥Ñ
  (.MR_Multi
    ¬∑
    (.MR_Once
      (.R_Plus
        (.P_Zero 1 |> .P_Succ))))

end ReduceNatExpr

/-!
## Ê±∫ÂÆöÁöÑÁ∞°Á¥Ñ${}\DReduces{}$„Å´„Åä„Åë„ÇãÁ∞°Á¥ÑÈ†ÜÂ∫è
ReduceNatExpr„ÅØÂä†ÁÆó„Éª‰πóÁÆó„ÅÆÂ∑¶„Åã„ÇâÁ∞°Á¥Ñ„ÇíÈÄ≤„ÇÅ„Çã„Çà„ÅÜ„Å´„Å™„Å£„Å¶„ÅÑ„Åü„ÄÇ

### Á∑¥ÁøíÂïèÈ°å1.10 [Âü∫Á§éÊ¶ÇÂøµ,¬ß1.4]
-/

/-!
## Ê±∫ÂÆöÁöÑÁ∞°Á¥Ñ${}\DReduces{}$„Å´„Åä„Åë„ÇãÁ∞°Á¥ÑÈ†ÜÂ∫è
ReduceNatExpr„ÅØÂä†ÁÆó„Éª‰πóÁÆó„ÅÆÂ∑¶„Åã„ÇâÁ∞°Á¥Ñ„ÇíÈÄ≤„ÇÅ„Çã„Çà„ÅÜ„Å´„Å™„Å£„Å¶„ÅÑ„Åü„ÄÇ
-/
namespace ReduceNatExprR
/-!
### ReduceNatExprR„Å´„Çà„ÇãÂ∞éÂá∫„ÅÆ‰æã
-/

def derive_times_SZ_SZ : Derivation (.Times 1 1 1) :=
  (.T_Zero 1 |>
    (.T_Succ ¬∑ (.P_Zero 0 |> .P_Succ)))

/-!
#### Á∑¥ÁøíÂïèÈ°å1.10 [Âü∫Á§éÊ¶ÇÂøµ,¬ß1.4]
-/
/--
(1) $\TT{SZ * SZ + SZ * SZ} \DReduces \TT{SZ * SZ + SZ}$
-/
def dreduce_add_mul_SZ_SZ_mul_SZ_SZ : Derivation (1 * 1 + 1 * 1 ‚ü∂' 1 * 1 + 1) :=
  (.DR_PlusR'
    (.DR_Times
      derive_times_SZ_SZ))

/-!
#### (2) $\TT{SZ * SZ + SZ} \DReduces \TT{SZ + SZ}$
-/
def dreduce_add_mul_SZ_SZ_SZ : Derivation (1 * 1 + 1 ‚ü∂' 1 + 1) :=
  (.DR_PlusL'
    (.DR_Times
      derive_times_SZ_SZ))

end ReduceNatExprR

/-!
## Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†ReduceNatExpr„Å´Èñ¢„Åô„Çã„É°„ÇøÂÆöÁêÜ
-/
namespace ReduceNatExpr

/-!
### ReduceNatExpr„ÅåPeanoNat„ÅÆÂ∞éÂá∫„ÇíÂê´„ÇÄ„Åì„Å®
EvalNatExpr„Å®ÂÖ®„ÅèÂêåÊßò„Å´Ë®ºÊòé„Åß„Åç„Çã„ÄÇ
-/

def Derivation.toNatPlus : Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí PeanoNat.Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)
  | .P_Zero n => .P_Zero n
  | .P_Succ d => .P_Succ d.toNatPlus
instance : Coe (Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)) (PeanoNat.Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)) where
  coe := Derivation.toNatPlus

def Derivation.toNatTimes : Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí PeanoNat.Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)
  | .T_Zero n     => .T_Zero n
  | .T_Succ dt dp => .T_Succ dt.toNatTimes dp
instance : Coe (Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)) (PeanoNat.Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)) where
  coe := Derivation.toNatTimes

end ReduceNatExpr

def PeanoNat.Derivation.toReduceNatPlus : PeanoNat.Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí ReduceNatExpr.Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)
  | .P_Zero n => .P_Zero n
  | .P_Succ d => .P_Succ d.toReduceNatPlus
instance : Coe (PeanoNat.Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)) (ReduceNatExpr.Derivation (.Plus n‚ÇÅ n‚ÇÇ n‚ÇÉ)) where
  coe d := d.toReduceNatPlus

def PeanoNat.Derivation.toReduceNatTimes : PeanoNat.Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ) ‚Üí ReduceNatExpr.Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)
  | .T_Zero n     => .T_Zero n
  | .T_Succ dt dp => .T_Succ dt.toReduceNatTimes dp
instance : Coe (PeanoNat.Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)) (ReduceNatExpr.Derivation (.Times n‚ÇÅ n‚ÇÇ n‚ÇÉ)) where
  coe d := d.toReduceNatTimes

namespace ReduceNatExpr
/-!
### Ë£úÈ°å
-/
theorem add_nat_nat_uniq : Derivation (.Add (.Nat n) (.Nat m) ‚ü∂ x) ‚Üí Derivation (.Add (.Nat n) (.Nat m) ‚ü∂ y) ‚Üí x = y
  | .R_Plus d1, .R_Plus d2 => PeanoNat.plus_uniq d1.toNatPlus d2.toNatPlus |> congrArg Expr.Nat
theorem mul_nat_nat_uniq : Derivation (.Mul (.Nat n) (.Nat m) ‚ü∂ x) ‚Üí Derivation (.Mul (.Nat n) (.Nat m) ‚ü∂ y) ‚Üí x = y
  | .R_Times d1, .R_Times d2 => PeanoNat.times_uniq d1.toNatTimes d2.toNatTimes |> congrArg Expr.Nat

/-!
### Á∞°Á¥Ñ„ÅÆÂâçÈÄ≤ÊÄßÔºöÂÆöÁêÜ2.21 [Âü∫Á§éÊ¶ÇÂøµ,¬ß2.1]
-/
/--
Á∞°Á¥Ñ„ÅÆÂâçÈÄ≤ÊÄß

Áï∞„Å™„Çã„Ç≥„É≥„Çπ„Éà„É©„ÇØ„Çø„Å´„Çà„ÇãÈ†Ö`e‚ÇÅ,e‚ÇÇ`„Å©„ÅÜ„Åó„ÅÆÔºàËá™Êòé„Å™Ôºâ‰∏çÁ≠âÂºè`e‚ÇÅ ‚â† e‚ÇÇ`„ÅØ`Expr.noConfusion`„ÅßÁ§∫„Åõ„Çã„ÄÇ
`‚Ä¢ ‚â† ‚Ä¢`„ÅØ`‚Ä¢ = ‚Ä¢ ‚Üí False`„Å†„Åã„Çâ`Expr.noConfusion` = `fun (heq : e‚ÇÅ = e‚ÇÇ) => Expr.noConfusion heq`„Å´Ê≥®ÊÑè„ÄÇ
-/
theorem reduce_progressive : (e : Expr) ‚Üí (‚àÄ {n}, e ‚â† .Nat n) ‚Üí ‚àÉ e', Derivable (e ‚ü∂ e') :=
  Expr.rec (motive := fun e => (‚àÄ {n}, e ‚â† .Nat n) ‚Üí ‚àÉ e', Derivable (e ‚ü∂ e'))
    (fun _ hn => False.elim <| false_of_ne hn)
    (fun e‚ÇÅ e‚ÇÇ h1 h2 =>
      match e‚ÇÅ, e‚ÇÇ with
      | .Nat n, .Nat m =>
          have ‚ü®k, ‚ü®ùíü‚ü©‚ü© := PeanoNat.derive_plus n m
          fun _ => ‚ü®k, ‚ü®.R_Plus ùíü‚ü©‚ü©
      | .Nat n, .Add _ _ =>
          have ‚ü®e‚ÇÇ', ‚ü®ùíü‚ü©‚ü© := h2 Expr.noConfusion
          fun _ => ‚ü®n + e‚ÇÇ', ‚ü®.R_PlusR ùíü‚ü©‚ü©
      | .Nat n, .Mul _ _ =>
          have ‚ü®e‚ÇÇ', ‚ü®ùíü‚ü©‚ü© := h2 Expr.noConfusion
          fun _ => ‚ü®n + e‚ÇÇ', ‚ü®.R_PlusR ùíü‚ü©‚ü©
      | .Add _ _, e‚ÇÇ =>
          have ‚ü®e‚ÇÅ', ‚ü®ùíü‚ü©‚ü© := h1 Expr.noConfusion
          fun _ => ‚ü®e‚ÇÅ' + e‚ÇÇ, ‚ü®.R_PlusL ùíü‚ü©‚ü©
      | .Mul _ _, e‚ÇÇ =>
          have ‚ü®e‚ÇÅ', ‚ü®ùíü‚ü©‚ü© := h1 Expr.noConfusion
          fun _ => ‚ü®e‚ÇÅ' + e‚ÇÇ, ‚ü®.R_PlusL ùíü‚ü©‚ü©
    )
    (fun e‚ÇÅ e‚ÇÇ h1 h2 =>
      match e‚ÇÅ, e‚ÇÇ with
      | .Nat n, .Nat m =>
          have ‚ü®k, ‚ü®ùíü‚ü©‚ü© := PeanoNat.derive_times n m
          fun _ => ‚ü®k, ‚ü®.R_Times ùíü‚ü©‚ü©
      | .Nat n, .Add _ _ =>
          have ‚ü®e‚ÇÇ', ‚ü®ùíü‚ü©‚ü© := h2 Expr.noConfusion
          fun _ => ‚ü®n * e‚ÇÇ', ‚ü®.R_TimesR ùíü‚ü©‚ü©
      | .Nat n, .Mul _ _ =>
          have ‚ü®e‚ÇÇ', ‚ü®ùíü‚ü©‚ü© := h2 Expr.noConfusion
          fun _ => ‚ü®n * e‚ÇÇ', ‚ü®.R_TimesR ùíü‚ü©‚ü©
      | .Add _ _, e‚ÇÇ =>
          have ‚ü®e‚ÇÅ', ‚ü®ùíü‚ü©‚ü© := h1 Expr.noConfusion
          fun _ => ‚ü®e‚ÇÅ' * e‚ÇÇ, ‚ü®.R_TimesL ùíü‚ü©‚ü©
      | .Mul _ _, e‚ÇÇ =>
          have ‚ü®e‚ÇÅ', ‚ü®ùíü‚ü©‚ü© := h1 Expr.noConfusion
          fun _ => ‚ü®e‚ÇÅ' * e‚ÇÇ, ‚ü®.R_TimesL ùíü‚ü©‚ü©
    )

/-!
### Ë§áÊï∞ÂõûÁ∞°Á¥Ñ„Å´Èñ¢„Åô„ÇãË£úÈ°å
Á∞°Á¥Ñ„ÅÆÂêàÊµÅÊÄß„ÅÆË®ºÊòé„Å´Áî®„ÅÑ„ÇãË§áÊï∞ÂõûÁ∞°Á¥Ñ„Å´Èñ¢„Åô„ÇãË£úÈ°å„ÇíË®ºÊòé„Åó„Å¶„Åä„Åè„ÄÇ
-/

/--
Âä†ÁÆó„ÅÆÂ∑¶„ÅÆÈ†Ö„ÇíË§áÊï∞ÂõûÁ∞°Á¥Ñ„Åô„ÇãË£úÈ°å„ÄÇ
-/
theorem Derivation.MR_PlusL
: Derivation (e ‚ü∂* e')
‚Üí Derivable (e + e‚ÇÇ ‚ü∂* e' + e‚ÇÇ) :=
  Derivation.induction_mreduce
    (motive := fun e e' => Derivable (e + _ ‚ü∂* e' + _))
    (‚ü®.MR_Zero‚ü©)
    (fun d => ‚ü®.MR_Once (.R_PlusL d)‚ü©)
    (fun _ _ ‚ü®d‚ü© ‚ü®d'‚ü© => ‚ü®.MR_Multi d d'‚ü©)

/--
Âä†ÁÆó„ÅÆÂè≥„ÅÆÈ†Ö„ÇíË§áÊï∞ÂõûÁ∞°Á¥Ñ„Åô„ÇãË£úÈ°å„ÄÇ
-/
theorem Derivation.MR_PlusR
: Derivation (e ‚ü∂* e')
‚Üí Derivable (e‚ÇÅ + e ‚ü∂* e‚ÇÅ + e') :=
  Derivation.induction_mreduce
    (motive := fun e e' => Derivable (_ + e ‚ü∂* _ + e'))
    (‚ü®.MR_Zero‚ü©)
    (fun d => ‚ü®.MR_Once <| .R_PlusR d‚ü©)
    (fun _ _ ‚ü®d‚ü© ‚ü®d'‚ü© => ‚ü®.MR_Multi d d'‚ü©)

/--
‰πóÁÆó„ÅÆÂ∑¶„ÅÆÈ†Ö„ÇíË§áÊï∞ÂõûÁ∞°Á¥Ñ„Åô„ÇãË£úÈ°å„ÄÇ
-/
theorem Derivation.MR_TimesL
: Derivation (e ‚ü∂* e')
‚Üí Derivable (e * e‚ÇÇ ‚ü∂* e' * e‚ÇÇ) :=
  Derivation.induction_mreduce
    (motive := fun e e' => Derivable (e * _ ‚ü∂* e' * _))
    (‚ü®.MR_Zero‚ü©)
    (fun d => ‚ü®.MR_Once <| .R_TimesL d‚ü©)
    (fun _ _ ‚ü®d‚ü© ‚ü®d'‚ü© => ‚ü®.MR_Multi d d'‚ü©)

/--
‰πóÁÆó„ÅÆÂè≥„ÅÆÈ†Ö„ÇíË§áÊï∞ÂõûÁ∞°Á¥Ñ„Åô„ÇãË£úÈ°å„ÄÇ
-/
theorem Derivation.MR_TimesR
: Derivation (e ‚ü∂* e')
‚Üí Derivable (e‚ÇÅ * e ‚ü∂* e‚ÇÅ * e') :=
  Derivation.induction_mreduce
    (motive := fun e e' => Derivable (_ * e ‚ü∂* _ * e'))
    (‚ü®.MR_Zero‚ü©)
    (fun d => ‚ü®.MR_Once <| .R_TimesR d‚ü©)
    (fun _ _ ‚ü®d‚ü© ‚ü®d'‚ü© => ‚ü®.MR_Multi d d'‚ü©)

/-!
### Á∞°Á¥Ñ„ÅÆÂêàÊµÅÊÄßÔºöÂÆöÁêÜ2.22 [Âü∫Á§éÊ¶ÇÂøµ,¬ß2.1]
-/
/--
Á∞°Á¥Ñ„ÅÆÂêàÊµÅÊÄß
-/
theorem reduce_confluence : Derivation (e‚ÇÅ ‚ü∂ e‚ÇÇ) ‚Üí Derivation (e‚ÇÅ ‚ü∂ e‚ÇÉ) ‚Üí ‚àÉ e‚ÇÑ, Derivable (e‚ÇÇ ‚ü∂* e‚ÇÑ) ‚àß Derivable (e‚ÇÉ ‚ü∂* e‚ÇÑ)
  | .R_Plus (n‚ÇÉ := n‚ÇÉ) d1, .R_Plus (n‚ÇÉ := n‚ÇÉ') d2 =>
      have heq : n‚ÇÉ = n‚ÇÉ' := PeanoNat.plus_uniq d1.toNatPlus d2.toNatPlus
      Exists.intro n‚ÇÉ
        ‚ü®‚ü®.MR_Zero‚ü©
        ,heq ‚ñ∏ ‚ü®.MR_Zero‚ü©
        ‚ü©
  | .R_Times (n‚ÇÉ := n‚ÇÉ) d1, .R_Times (n‚ÇÉ := n‚ÇÉ') d2 =>
      have heq : n‚ÇÉ = n‚ÇÉ' := PeanoNat.times_uniq d1.toNatTimes d2.toNatTimes
      Exists.intro n‚ÇÉ
        ‚ü®‚ü®.MR_Zero‚ü©
        ,heq ‚ñ∏ ‚ü®.MR_Zero‚ü©
        ‚ü©
  | .R_PlusL (e‚ÇÇ := e‚ÇÇ) d1, .R_PlusL (e‚ÇÅ' := e‚ÇÅ'') d2 =>
      have ‚ü®e, ‚ü®d1‚ü©, ‚ü®d2‚ü©‚ü© := reduce_confluence d1 d2
      Exists.intro (e + e‚ÇÇ) ‚ü®d1.MR_PlusL, d2.MR_PlusL‚ü©
  | .R_PlusL (e‚ÇÅ' := e‚ÇÅ') d1, .R_PlusR (e‚ÇÇ' := e‚ÇÇ') d2 =>
      Exists.intro (e‚ÇÅ' + e‚ÇÇ')
        ‚ü®‚ü®.MR_Once <| .R_PlusR (e‚ÇÅ := e‚ÇÅ') d2‚ü©
        ,‚ü®.MR_Once <| .R_PlusL (e‚ÇÇ := e‚ÇÇ') d1‚ü©
        ‚ü©
  | .R_PlusR (e‚ÇÇ' := e‚ÇÇ') d1, .R_PlusL (e‚ÇÅ' := e‚ÇÅ') d2 =>
      Exists.intro (e‚ÇÅ' + e‚ÇÇ')
        ‚ü®‚ü®.MR_Once <| .R_PlusL (e‚ÇÇ := e‚ÇÇ') d2‚ü©
        ,‚ü®.MR_Once <| .R_PlusR (e‚ÇÅ := e‚ÇÅ') d1‚ü©
        ‚ü©
  | .R_PlusR (e‚ÇÅ := e‚ÇÅ) d1, .R_PlusR (e‚ÇÇ' := e‚ÇÇ'') d2 =>
      have ‚ü®e, ‚ü®d1‚ü©, ‚ü®d2‚ü©‚ü© := reduce_confluence d1 d2
      Exists.intro (e‚ÇÅ + e) ‚ü®d1.MR_PlusR, d2.MR_PlusR‚ü©
  | .R_TimesL (e‚ÇÇ := e‚ÇÇ) d1, .R_TimesL (e‚ÇÅ' := e‚ÇÅ'') d2 =>
      have ‚ü®e, ‚ü®d1‚ü©, ‚ü®d2‚ü©‚ü© := reduce_confluence d1 d2
      Exists.intro (e * e‚ÇÇ) ‚ü®d1.MR_TimesL, d2.MR_TimesL‚ü©
  | .R_TimesL (e‚ÇÅ' := e‚ÇÅ') d1, .R_TimesR (e‚ÇÇ' := e‚ÇÇ') d2 =>
      Exists.intro (e‚ÇÅ' * e‚ÇÇ')
        ‚ü®‚ü®.MR_Once <| .R_TimesR (e‚ÇÅ := e‚ÇÅ') d2‚ü©
        ,‚ü®.MR_Once <| .R_TimesL (e‚ÇÇ := e‚ÇÇ') d1‚ü©
        ‚ü©
  | .R_TimesR (e‚ÇÇ' := e‚ÇÇ') d1, .R_TimesL (e‚ÇÅ' := e‚ÇÅ') d2 =>
      Exists.intro (e‚ÇÅ' * e‚ÇÇ')
        ‚ü®‚ü®.MR_Once <| .R_TimesL (e‚ÇÇ := e‚ÇÇ') d2‚ü©
        ,‚ü®.MR_Once <| .R_TimesR (e‚ÇÅ := e‚ÇÅ') d1‚ü©
        ‚ü©
  | .R_TimesR (e‚ÇÅ := e‚ÇÅ) d1, .R_TimesR (e‚ÇÇ' := e‚ÇÇ'') d2 =>
      have ‚ü®e, ‚ü®d1‚ü©, ‚ü®d2‚ü©‚ü© := reduce_confluence d1 d2
      Exists.intro (e‚ÇÅ * e) ‚ü®d1.MR_TimesR, d2.MR_TimesR‚ü©

/-!
### Ê±∫ÂÆöÁöÑÁ∞°Á¥Ñ„ÅÆ‰∏ÄÊÑèÊÄßÔºöÂÆöÁêÜ2.23 [Âü∫Á§éÊ¶ÇÂøµ,¬ß2.1]
-/
/--
Ê±∫ÂÆöÁöÑÁ∞°Á¥Ñ„ÅÆ‰∏ÄÊÑèÊÄß
-/
theorem dreduce_uniq : Derivation (e ‚ü∂' e') ‚Üí Derivation (e ‚ü∂' e'') ‚Üí e' = e''
  | .DR_Plus d', .DR_Plus d'' =>
      congrArg Expr.Nat (PeanoNat.plus_uniq d'.toNatPlus d''.toNatPlus)
  | .DR_Times d', .DR_Times d'' =>
      congrArg Expr.Nat (PeanoNat.times_uniq d'.toNatTimes d''.toNatTimes)
  | .DR_PlusL x, .DR_PlusL y =>
      congrArg (¬∑ + _) (dreduce_uniq x y)
  | .DR_PlusR x, .DR_PlusR y =>
      congrArg (_ + ¬∑) (dreduce_uniq x y)
  | .DR_TimesL x, .DR_TimesL y =>
      congrArg (¬∑ * _) (dreduce_uniq x y)
  | .DR_TimesR x, .DR_TimesR y =>
      congrArg (_ * ¬∑) (dreduce_uniq x y)

/-!
### ÂÆöÁêÜ2.24 [Âü∫Á§éÊ¶ÇÂøµ,¬ß2.1]
-/
/--
Ê±∫ÂÆöÁöÑÁ∞°Á¥Ñ„ÅØÔºàÊôÆÈÄö„ÅÆÔºâÁ∞°Á¥Ñ„Å´Âê´„Åæ„Çå„Çã„ÄÇ
-/
theorem reduce_of_dreduce : Derivation (e ‚ü∂' e') ‚Üí Derivable (e ‚ü∂ e')
  | .DR_Plus  d => ‚ü®.R_Plus  d‚ü©
  | .DR_Times d => ‚ü®.R_Times d‚ü©
  | .DR_PlusL d =>
      have ‚ü®d‚ü© := reduce_of_dreduce d
      ‚ü®.R_PlusL d‚ü©
  | .DR_PlusR d =>
      have ‚ü®d‚ü© := reduce_of_dreduce d
      ‚ü®.R_PlusR d‚ü©
  | .DR_TimesL d =>
      have ‚ü®d‚ü© := reduce_of_dreduce d
      ‚ü®.R_TimesL d‚ü©
  | .DR_TimesR d =>
      have ‚ü®d‚ü© := reduce_of_dreduce d
      ‚ü®.R_TimesR d‚ü©

/-!
### Âº±Ê≠£Ë¶èÂåñÂèØËÉΩÊÄßÔºöÂÆöÁêÜ2.25 [Âü∫Á§éÊ¶ÇÂøµ,¬ß2.1]
-/
/--
Â∞éÂá∫„Ç∑„Çπ„ÉÜ„É†ReduceNatExpr„ÅØÂº±Ê≠£Ë¶èÂåñÂèØËÉΩÊÄß(weak normalization property)„ÇíÊåÅ„Å§„ÄÇ
-/
theorem weak_normalization : (e : Expr) ‚Üí ‚àÉ n : PNat, Derivable (e ‚ü∂* n)
  | .Nat n => Exists.intro n ‚ü®.MR_Zero‚ü©
  | .Add e‚ÇÅ e‚ÇÇ =>
      have ‚ü®n‚ÇÅ, ‚ü®d‚ÇÅ‚ü©‚ü© := weak_normalization e‚ÇÅ
      have ‚ü®n‚ÇÇ, ‚ü®d‚ÇÇ‚ü©‚ü© := weak_normalization e‚ÇÇ
      have ‚ü®¬´n‚ÇÅ+n‚ÇÇ¬ª, ‚ü®dp‚ü©‚ü© := PeanoNat.derive_plus n‚ÇÅ n‚ÇÇ
      have ‚ü®d'‚ü© := Derivation.MR_PlusL (e‚ÇÇ := e‚ÇÇ) d‚ÇÅ
      have ‚ü®d''‚ü© := Derivation.MR_PlusR (e‚ÇÅ := n‚ÇÅ) d‚ÇÇ
      Exists.intro ¬´n‚ÇÅ+n‚ÇÇ¬ª ‚ü®
        .MR_Multi
          (.MR_Multi d' d'')
          (.MR_Once <| .R_Plus dp)
      ‚ü©
  | .Mul e‚ÇÅ e‚ÇÇ =>
      have ‚ü®n‚ÇÅ, ‚ü®d‚ÇÅ‚ü©‚ü© := weak_normalization e‚ÇÅ
      have ‚ü®n‚ÇÇ, ‚ü®d‚ÇÇ‚ü©‚ü© := weak_normalization e‚ÇÇ
      have ‚ü®¬´n‚ÇÅ*n‚ÇÇ¬ª, ‚ü®dt‚ü©‚ü© := PeanoNat.derive_times n‚ÇÅ n‚ÇÇ
      have ‚ü®d'‚ü© := Derivation.MR_TimesL (e‚ÇÇ := e‚ÇÇ) d‚ÇÅ
      have ‚ü®d''‚ü© := Derivation.MR_TimesR (e‚ÇÅ := n‚ÇÅ) d‚ÇÇ
      Exists.intro ¬´n‚ÇÅ*n‚ÇÇ¬ª ‚ü®
        .MR_Multi
          (.MR_Multi d' d'')
          (.MR_Once <| .R_Times dt)
      ‚ü©

/-!
### TODO Âº∑Ê≠£Ë¶èÂåñÂèØËÉΩÊÄßÔºöÂÆöÁêÜ2.26 [Âü∫Á§éÊ¶ÇÂøµ,¬ß2.1]
Á§∫„Åô„Åπ„Åç„Åì„Å®„ÅØ
$$
\forall\MV{e}. \bigl\[\lnot\exists(\MV{e}\_n)\_{n \in \mathbb{N}}. \MV{e}=\MV{e}\_0 \land \forall i\in\mathbb{N}. \MV{e}\_i\Reduces\MV{e}\_{i+1}\bigr\].
$$
ËßíÊã¨ÂºßÂÜÖ„ÅØ
$$\begin{align*}
& \lnot\exists(\MV{e}\_n)\_{n \in \mathbb{N}}. \MV{e}=\MV{e}\_0 \land \forall i\in\mathbb{N}. \MV{e}\_i\Reduces\MV{e}\_{i+1} \\\\
{}\overset{?}{\iff}{}& \forall(\MV{e}\_n)\_{n \in \mathbb{N}}. \MV{e}\neq\MV{e}\_0 \lor \lnot\forall i\in\mathbb{N}. \MV{e}\_i\Reduces\MV{e}\_{i+1} \\\\
{}\overset{?}{\iff}{}& \forall(\MV{e}\_n)\_{n \in \mathbb{N}}. \MV{e}=\MV{e}\_0 \implies \exists i\in\mathbb{N}. \lnot\bigl(\MV{e}\_i\Reduces\MV{e}\_{i+1}\bigr) \\\\
\end{align*}$$
$\def\es{\mathit{es}}$
„Å®„Åß„Åç„Çã„ÄÇ

Lean„Åß„ÅØÁÆóË°ìÂºè„ÅÆÁÑ°ÈôêÂàó$(\MV{e}\_n)_{n \in \mathbb{N}}$„ÅØÈñ¢Êï∞$\es\colon \mathbb{N}\to\Set{Expr}$„ÅßË°®Áèæ„Åô„Çã„Å®ËâØ„Åï„Åù„ÅÜ„ÄÇ
-/
/--
ÔºàÊú™Ë®ºÊòéÔºâÂ∞éÂá∫„Ç∑„Çπ„ÉÜ„É†ReduceNatExpr„ÅØÂº∑Ê≠£Ë¶èÂåñÂèØËÉΩÊÄß(strong normalization property)„ÇíÊåÅ„Å§„ÄÇ
-/
theorem strong_normalization : (e : Expr) ‚Üí ¬¨ ‚àÉ es : Nat ‚Üí Expr, es 0 = e ‚àß ‚àÄ i : Nat, Derivable (es i ‚ü∂ es i.succ) :=
  fun e ‚ü®es, h0, h‚ü© =>
    have ‚ü®d0‚ü© := h0 ‚ñ∏ h 0
    match e with
    | .Nat n => nomatch d0
    | .Add (.Nat n) (.Nat m) =>
        have ‚ü®k, ‚ü®d‚ü©‚ü© := PeanoNat.derive_plus n m
        have h1 := add_nat_nat_uniq d0 (Derivation.R_Plus d.toReduceNatPlus)
        match h1 ‚ñ∏ d0 with
        | .R_Plus d => nomatch h1 ‚ñ∏ h 1
    | .Mul (.Nat n) (.Nat m) =>
        have ‚ü®k, ‚ü®d‚ü©‚ü© := PeanoNat.derive_times n m
        have h1 := mul_nat_nat_uniq d0 (Derivation.R_Times d.toReduceNatTimes)
        match h1 ‚ñ∏ d0 with
        | .R_Times d => nomatch h1 ‚ñ∏ h 1
    | .Add (.Nat n) e‚ÇÇ =>
        have := strong_normalization e‚ÇÇ
        sorry
    | .Add e‚ÇÅ (.Nat m) =>
        have := strong_normalization e‚ÇÅ
        sorry
    | .Mul (.Nat n) e‚ÇÇ =>
        have := strong_normalization e‚ÇÇ
        sorry
    | .Mul e‚ÇÅ (.Nat m) =>
        have := strong_normalization e‚ÇÅ
        sorry
    | .Add e‚ÇÅ e‚ÇÇ =>
        have := strong_normalization e‚ÇÅ
        have := strong_normalization e‚ÇÇ
        sorry
    | .Mul e‚ÇÅ e‚ÇÇ =>
        have := strong_normalization e‚ÇÅ
        have := strong_normalization e‚ÇÇ
        sorry
